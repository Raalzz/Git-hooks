#!/bin/sh
RED="\033[1;31m"
GREEN="\033[1;32m"
NC="\033[0m"
linter_exit_code=1
staged_js_files=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g')

# skip if there are no js or ts files
if [ -z "$staged_js_files" ]; then
    exit 0
fi

echo "staged files are ${staged_js_files}"

echo "Running Lint"
# Run Lint to staged files
./node_modules/.bin/eslint $staged_js_files --quiet --fix

echo "Running Prettier"
# Run Prettier to staged files
./node_modules/.bin/prettier $staged_js_files --ignore-unknown --write

echo "Running Tests"
# Run tests related to staged files
./node_modules/.bin/jest --bail --findRelatedTests $staged_js_files --passWithNoTests


linter_exit_code=$?
echo "linter_exit_code is ${linter_exit_code}"

echo "running  git add to ${staged_js_files}"
git add -f $staged_js_files

if [ $linter_exit_code -ne 0 ]
then
  echo "${RED} ❌ 🥵 Linter errors have occurred ( ͡ಥ ͜ʖ ͡ಥ)${NC}"
  exit 1
else
  echo "${GREEN} ✔ Eslint did not find any errors [̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]${NC}"
  exit 0
fi
# No, no, no! fix that validation bug first.
# Do you really believe your validation is working??? Run the test before commiting, dude!
# I can play this game all day long...
# Please you can do better than this.

#
#
#
#
#
#
#
#
#

#New Implementation:

# RED="\033[1;31m"
# GREEN="\033[1;32m"
# NC="\033[0m"

# #get all staged files in a variable "STAGED_FILES"
# STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g')
# staged_js_files=$(git diff --cached --diff-filter=d --name-only | grep .js$)

# printf "Running Hoooksss \n"
# echo "staged files are ${STAGED_FILES} \n"
# echo "staged_js_files are  ${staged_js_files} \n"


# #If there are no staged files then exit
# [ -z "$STAGED_FILES" ] && exit 0

# printf "Running lint:fix \n"

# # Validate all the staged files
# # npm run lint:fix $STAGED_FILES
# echo "$STAGED_FILES" | xargs npm run lint:fix

# # Add back the modified/prettified files to staging
# echo "$STAGED_FILES" | xargs git add

# exit 0
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

# # run type-check
# yarn run --silent tsc
# tsc_exit_code=$?

# # check the tsc exit code
# if [ $tsc_exit_code -ne 0 ]; then
#     echo "🥵 tsc failed"
#     exit 1
# else
#     echo "👍 tsc"
# fi

# # run linter on staged files => save exit code for later
# yarn run --silent eslint $staged_files --quiet --fix
# linter_exit_code=$?

# # add files auto-fixed by the linter
# git add $staged_files

# # check linter exit code
# if [ $linter_exit_code -ne 0 ]; then
#     echo "🥵 lint failed"
#     exit 1
# else
#     echo "👍 lint"
# fi

# # return 0-exit code
# echo "🎉 all good to go"
# exit 0